@page "/"

@using CommunityToolkit.Maui.Alerts
@using CommunityToolkit.Maui.Core
@using CommunityToolkit.Maui.Storage
@using WordCounterBase.Models
@using WordCounterBase.Processors

<h3>Word Counter</h3>

<br />
<div class="buttonsContainerFolderSelection">
    <button @onclick="PickFolder" disabled="@processing">Select Folder</button>
    <button @onclick="ProcessSelectedFolder" disabled="@(string.IsNullOrEmpty(rootFolderPath) || processing)">Process Folder</button>
</div>

<div>
    <label for="rootFolderPath">Root Folder Path:</label>
    <input id="rootFolderPath" type="text" readonly value="@rootFolderPath" style="width: 300px;" />
</div>

<br />

<div>
    <label for="totalWordsAllFiles">Total Words:</label>
    <label id="totalWordsAllFiles" style="width: 300px;">@totalWordsAllFiles</label>
</div>

<br />


@if (processing)
{
    <span>Loading...</span>
}
else
{
    <table>
        <thead>
            <tr>
                <th class="fileColumn">File</th>
                <th class="wordsColumn">Words</th>
                <th class="scannedColumn">Scanned</th>
            </tr>
        </thead>
        @foreach (var result in wordCountResults.ToList())
        {
            <tr>
                <td class="fileColumn">@result.FileName.Replace(rootFolderPath+"\\", string.Empty)</td>
                <td class="wordsColumn">@result.WordCount</td>
                <td class="scannedColumn">@(result.ScannedDocument ? "✓" : string.Empty)</td>
            </tr>
        }
    </table>
}


@code {
    private string rootFolderPath = string.Empty;
    private List<WordCountResult> wordCountResults = new List<WordCountResult>();
    private int totalWordsAllFiles = 0;
    private bool processing = false;

    async Task PickFolder()
    {
        var result = await FolderPicker.Default.PickAsync();
        if (result.IsSuccessful)
        {
            //await Toast.Make($"The folder was picked: Name - {result.Folder.Name}, Path - {result.Folder.Path}", ToastDuration.Long).Show();
            rootFolderPath = result.Folder.Path;
            StateHasChanged();
        }
        else 
        {
            await Toast.Make($"The folder was not picked with error: {result.Exception.Message}").Show();
        }
    }

    async Task ProcessSelectedFolder()
    {
        processing = true;
        StateHasChanged();

        wordCountResults.Clear(); // Clear previous results
        await Task.Run(() =>
        {
            wordCountResults = FolderProcessor.ProcessFolder(rootFolderPath);
        });

        totalWordsAllFiles = wordCountResults.Sum(result => result.WordCount);

        processing = false;

        StateHasChanged(); // Update the UI after processing the folder
    }


    
}